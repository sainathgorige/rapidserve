---
- name: Implement dns functionality. Adding bind9 configurations for customer infra
  gather_facts: no
  hosts: all
  become: false
  vars:
    containers:
      "192.168.38.8": "dns_cont_host1"
      "192.168.38.9": "dns_cont_host2"
    bind_conf_path: "/etc/bind"
    bind_zones_path: "{{ bind_conf_path }}/zones"
    subnets:
      - 192.168.100.118/32 #dj_ge public up
      - 192.168.100.150/32
      - 192.168.100.0/24
      - 172.16.0.1/32
      - 172.16.3.0/24
      - 172.16.4.0/24
      - 172.16.5.0/24     
    # regions: 
    #   - ireland
    #   - greece
    #   - bangladesh
    #   - thailand
    # existing_regions:
    # - region: india
    #   public_ips: 192.168.100.140
    # - region: germany
    #   public_ips: 192.168.100.141
    # tenant_name: chandler
    # domainName: chandler.cdn.com
    # origin_vpc_public_subnet_ip: 192.168.100.1 
    combined_regions: "{{ existing_regions | map('regex_replace', '(.*)', '{\"region\": \"\\1\"}') | list + regions }}"
    container_names: []

  tasks:
    - name: Set tenant abbreviation variable
      set_fact:
        tenant_abbreviation: "{{ tenant_name[:2] }}"

    - name: Combine region lists
      set_fact:
        unified_regions: "{{ regions + existing_regions | map(attribute='region') | list }}"

    - debug:
        msg: "Unified regions list: {{ unified_regions }}"

    - name: Set abbreviated combined regions list
      set_fact:
        location: "{{ dict(unified_regions | zip(unified_regions | map('regex_replace', '^(..).*$', '\\1'))) }}"

    - name: Print all regions
      debug:
        msg: "{{ location }}"

    - name: Set abbreviated new regions list
      set_fact:
        new_location: "{{ dict(regions | zip(regions | map('regex_replace', '^(..).*$', '\\1'))) }}"

    - name: Print new regions
      debug:
        msg: "{{ new_location }}"

    - name: Generate region prefixes
      set_fact:
        region_prefix: "{{ region_prefix | default({}) | combine({item: 'rs_' ~ tenant_abbreviation ~ '_' ~ item[:2]}) }}"
      loop: "{{ new_location.keys() }}"

    - name: Print consolidated region prefixes
      debug:
        msg: "{{ region_prefix }}"

    - name: Find containers for Bangladesh on 192.168.38.8
      shell: >
        docker ps --filter 'name=^{{ region_prefix['bangladesh'] }}*' --format '{{ '{{.Names}}' }}'
      register: bangladesh_containers
      when: 
        - "inventory_hostname == '192.168.38.8'"
        - "'bangladesh' in regions"
      delegate_to: 192.168.38.8
      ignore_errors: true

    - name: Set container list in Bangladesh
      set_fact:
        bangladesh_containers_list: "{{ bangladesh_containers.stdout_lines | default([]) }}"
      when: 
        - "inventory_hostname == '192.168.38.8'"
        - "'bangladesh' in regions"
      delegate_to: 192.168.38.8
      ignore_errors: true

    - name: Find containers for Thailand on 192.168.38.8
      shell: >
        docker ps --filter 'name=^{{ region_prefix['thailand'] }}*' --format '{{ '{{.Names}}' }}'
      register: thailand_containers
      when: 
        - "inventory_hostname == '192.168.38.8'"
        - "'thailand' in regions"
      delegate_to: 192.168.38.8
      ignore_errors: true

    - name: Set container list in thailand
      set_fact:
        thailand_containers_list: "{{ thailand_containers.stdout_lines | default([]) }}"
      when: 
        - "inventory_hostname == '192.168.38.8'"
        - "'thailand' in regions"
      delegate_to: 192.168.38.8
      ignore_errors: true

    - name: Find containers for greece on 192.168.38.9
      shell: >
        docker ps --filter 'name=^{{ region_prefix['greece'] }}*' --format '{{ '{{.Names}}' }}'
      register: greece_containers
      when: 
        - "inventory_hostname == '192.168.38.9'"
        - "'greece' in regions"
      delegate_to: 192.168.38.9
      ignore_errors: true

    - name: Set container list in greece
      set_fact:
        greece_containers_list: "{{ greece_containers.stdout_lines | default([]) }}"
      when: 
        - "inventory_hostname == '192.168.38.9'"
        - "'greece' in regions"
      delegate_to: 192.168.38.9
      ignore_errors: true

    - name: Find containers for ireland on 192.168.38.9
      shell: >
        docker ps --filter 'name=^{{ region_prefix['ireland'] }}*' --format '{{ '{{.Names}}' }}'
      register: ireland_containers
      when: 
        - "inventory_hostname == '192.168.38.9'"
        - "'ireland' in regions"
      delegate_to: 192.168.38.9
      ignore_errors: true

    - name: Set container list in ireland
      set_fact:
        ireland_containers_list: "{{ ireland_containers.stdout_lines | default([]) }}"
      when: 
        - "inventory_hostname == '192.168.38.9'"
        - "'ireland' in regions"
      delegate_to: 192.168.38.9
      ignore_errors: true

    - name: Combine container lists into a dictionary mapped by region and exclude empty entries
      set_fact:
        region_container_mappings: >-
          {{
            {
              'bangladesh': bangladesh_containers_list | default(''),
              'thailand': thailand_containers_list | default(''),
              'greece': greece_containers_list | default(''),
              'ireland': ireland_containers_list | default('')
            } 
          }}

    - name: Remove empty mappings from the dictionary
      set_fact:
        region_container_mappings: >-
          {{
            region_container_mappings
            | dict2items
            | selectattr('value', 'ne', '')
            | items2dict
          }}

    - name: Print the final container mappings for each region
      debug:
        msg: "{{ region_container_mappings }}"
        
    - name: Ensure BIND zones directory exists
      command: docker exec {{ containers[ansible_host] }} mkdir -p {{ bind_zones_path }}

    - name: Assign subnets sequentially to each location
      set_fact:
        subnet_mapping: "{{ dict(location.values() | zip(subnets)) }}"

    - name: Comment out named.conf.default-zones include in named.conf
      command: docker exec {{ containers[ansible_host] }} sed -i '/^include "\/etc\/bind\/named.conf.default-zones";$/ s/^/#/' {{ bind_conf_path }}/named.conf

    - name: Setup BIND named.conf with dynamic ACLs for each location
      command: >
        docker exec {{ containers[ansible_host] }} bash -c "printf '%s\n' 'acl \"{{ location[region].lower() }}_{{ tenant_abbreviation }}-users\" {' '{{ subnet_mapping[location[region]] }};' '};' 'view \"{{ location[region].lower() }}_{{ tenant_abbreviation }}-view\" {' 'match-clients { \"{{ location[region].lower() }}_{{ tenant_abbreviation }}-users\"; };' 'zone \"{{ domainName }}\" {' 'type master;' 'file \"{{ bind_zones_path }}/db.{{ domainName }}.{{ location[region].lower() }}.zone\";' '};' '};' >> {{ bind_conf_path }}/named.conf"
      loop: "{{ location.keys() }}"
      loop_control:
        loop_var: region

    - name: Create and execute shell script for Bangladesh and Thailand on 192.168.38.8
      block:
        - name: Create shell script
          copy:
            dest: "/tmp/fetch_ips_38_8.sh"
            mode: '0755'
            content: |
              #!/bin/bash
              {% for region, containers in region_container_mappings.items() if region in ['bangladesh', 'thailand'] %}
              echo "Processing region: {{ region }}"
              {% for container in containers %}
              interface="{{ container[:9] }}{{ container[-2:] }}"
              ip=$(docker exec {{ container }} ip addr show $interface | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
              echo "{{ region }},{{ container }},$ip"
              {% endfor %}
              {% endfor %}
        - name: Execute the shell script and capture output
          shell: /tmp/fetch_ips_38_8.sh
          register: ip_fetch_result_38_8
      when: inventory_hostname == '192.168.38.8'

    - name: Create and execute shell script for Greece and Ireland on 192.168.38.9
      block:
        - name: Create shell script
          copy:
            dest: "/tmp/fetch_ips_38_9.sh"
            mode: '0755'
            content: |
              #!/bin/bash
              {% for region, containers in region_container_mappings.items() if region in ['greece', 'ireland'] %}
              echo "Processing region: {{ region }}"
              {% for container in containers %}
              interface="{{ container[:9] }}{{ container[-2:] }}"
              ip=$(docker exec {{ container }} ip addr show $interface | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
              echo "{{ region }},{{ container }},$ip"
              {% endfor %}
              {% endfor %}
        - name: Execute the shell script and capture output
          shell: /tmp/fetch_ips_38_9.sh
          register: ip_fetch_result_38_9
      when: inventory_hostname == '192.168.38.9'

    - name: Debug the output of the IP fetch from 192.168.38.8
      debug:
        msg: "{{ ip_fetch_result_38_8.stdout }}"
      when: inventory_hostname == '192.168.38.8' and ip_fetch_result_38_8 is defined

    - name: Debug the output of the IP fetch from 192.168.38.9
      debug:
        msg: "{{ ip_fetch_result_38_9.stdout }}"
      when: inventory_hostname == '192.168.38.9' and ip_fetch_result_38_9 is defined

    - name: Initialize an empty dictionary for IP mappings
      set_fact:
        ip_mappings: {}

    - name: Parse IP fetch results and update mapping for 192.168.38.8
      set_fact:
        ip_mappings: "{{ ip_mappings | combine({item.split(',')[0]: (ip_mappings[item.split(',')[0]] | default([])) + [item.split(',')[2]] }) }}"
      loop: "{{ ip_fetch_result_38_8.stdout_lines }}"
      when: "inventory_hostname == '192.168.38.8' and item | regex_search('^[^,]+,[^,]+,[^,]+$')"
    
    - name: Parse IP fetch results and update mapping for 192.168.38.9
      set_fact:
        ip_mappings: "{{ ip_mappings | combine({item.split(',')[0]: (ip_mappings[item.split(',')[0]] | default([])) + [item.split(',')[2]] }) }}"
      loop: "{{ ip_fetch_result_38_9.stdout_lines }}"
      when: "inventory_hostname == '192.168.38.9' and item | regex_search('^[^,]+,[^,]+,[^,]+$')"

    - name: Debug the complete IP mappings
      debug:
        msg: "{{ ip_mappings }}"

    - name: Append existing regions IPs to the IP mappings
      set_fact:
        ip_mappings: "{{ ip_mappings | combine({item.region: (ip_mappings[item.region] | default([])) + [item.public_ips] }, recursive=True) }}"
      loop: "{{ existing_regions }}"

    - name: Debug the updated complete IP mappings
      debug:
        msg: "{{ ip_mappings }}"

    - name: Collect IP mappings from all hosts
      set_fact:
        ip_mappings: "{{ hostvars['192.168.38.8']['ip_mappings'] | default({}) | combine(hostvars['192.168.38.9']['ip_mappings'] | default({}), recursive=True) }}"
      delegate_to: localhost
      run_once: true

    - name: Append existing regions IPs to the IP mappings on localhost
      set_fact:
        ip_mappings: "{{ ip_mappings | combine({item.region: (ip_mappings[item.region] | default([])) + [item.public_ips] }, recursive=True) }}"
      loop: "{{ existing_regions }}"
      delegate_to: localhost
      run_once: true

    - name: Debug the updated complete IP mappings
      debug:
        msg: "{{ ip_mappings }}"
      delegate_to: localhost
      run_once: true

    - name: Create temporary DNS zone file on remote VM for each location
      copy:
        content: |
          $TTL    604800
          @       IN      SOA     ns.{{ domainName }}. admin.{{ domainName }}. (
                                    4         ; Serial
                                    604800    ; Refresh
                                    86400     ; Retry
                                    2419200   ; Expire
                                    604800 )  ; Negative Cache TTL
          ;
                  IN      NS      ns.{{ domainName }}.
          ns      IN      A       {{ origin_vpc_public_subnet_ip }}
          {% for ip in ip_mappings[item] %}
          @       IN      A       {{ ip }}
          {% endfor %}
        dest: "/tmp/db.{{ domainName }}.{{ item[:2] | lower }}.zone"
      loop: "{{ ip_mappings.keys() }}"
      delegate_to: localhost
      run_once: true

    - name: Copy DNS zone files to host
      copy:
        src: "/tmp/db.{{ domainName }}.{{ item[:2] | lower }}.zone"
        dest: "/tmp/db.{{ domainName }}.{{ item[:2] | lower }}.zone"
      loop: "{{ ip_mappings.keys() }}"
      delegate_to: "{{ inventory_hostname }}"

    - name: Copy zone files into Docker container
      command: >
        docker cp /tmp/db.{{ domainName }}.{{ item[:2] | lower }}.zone {{ containers[ansible_host] }}:{{ bind_zones_path }}/db.{{ domainName }}.{{ item[:2] | lower }}.zone
      loop: "{{ ip_mappings.keys() }}"
      delegate_to: "{{ inventory_hostname }}"

    - name: Remove temporary DNS zone files from remote hosts
      file:
        path: "/tmp/db.{{ domainName }}.{{ item[:2] | lower }}.zone"
        state: absent
      loop: "{{ ip_mappings.keys() }}"
      delegate_to: "{{ inventory_hostname }}"

    - name: Restart BIND9 to apply changes
      command: docker exec {{ containers[ansible_host] }} bash -c "kill -HUP $(cat /var/run/named/named.pid)"

    - name: Add routes for specific regions on 192.168.38.9
      ansible.builtin.command:
        cmd: "ip route add {{ item.public_ips }} via 192.168.4.2"
      loop: "{{ existing_regions }}"
      when: 
        - "inventory_hostname == '192.168.38.9'"
        - item.region in ['india', 'bangladesh']
      delegate_to: 192.168.38.9
      become: true

    - name: Add routes for specific regions on 192.168.38.8
      ansible.builtin.command:
        cmd: "ip route add {{ item.public_ips }} via 192.168.4.1"
      loop: "{{ existing_regions }}"
      when: 
        - "inventory_hostname == '192.168.38.8'"
        - item.region in ['france', 'germany']
      when: item.region in ['france', 'germany']
      delegate_to: 192.168.38.8
      become: true

    - name: Restart BIND9 to apply changes
      command: docker exec {{ containers[ansible_host] }} bash -c "kill -HUP $(cat /var/run/named/named.pid)"