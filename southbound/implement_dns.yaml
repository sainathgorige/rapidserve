---
- name: Configure BIND9 DNS Server for Dynamic Tenant-specific CDN
  hosts: dns_server_vm
  become: true
  vars:
    bind_conf_path: "/etc/bind"
    bind_zones_path: "{{ bind_conf_path }}/zones"
    python_script_path: "/home/vmadm/RapidServe/southbound/retrive_etcd.py"
    subnets:
      - 172.16.1.0/24
      - 172.16.2.0/24
    tenant_abbreviation:
      netflix: "NF"
      hotstar: "HS"
      disney: "D"
    interface_name_mapping:
      netflix:
        US: "NF_US_veth1"
        JP: "NF_JP_veth1"
      hotstar:
        US: "HS_US_veth1"
        JP: "HS_JP_veth1"
      disney:
        US: "D_US_veth1"
        JP: "D_JP_veth1"

  tasks:

    # - name: Retrieve data from etcd
    #   command: python3 retrive_etcd.py {{ item }}
    #   register: tenant_data
    #   loop: "{{ tenant_name }}"

    # - name: Parse retrieved data
    #   set_fact:
    #     etcd_data_parsed: "{{ tenant_data | from_yaml }}" #.results[0].stdout.split('\n')[1]
   
    # - name: Debug etcd_data_parsed
    #   debug:
    #     var: etcd_data_parsed


    # - name: Retrieve CDN configuration for the tenant from etcd
    #   command: "python3 {{ python_script_path }} {{ tenant_name }}"
    #   register: tenant_cdn_config_raw
    #   delegate_to: localhost

    # - name: Extract YAML data from script output
    #   set_fact:
    #     tenant_cdn_config: "{{ tenant_cdn_config_raw.stdout.split('Updated data:\n')[1] }}"

    - name: Parse the CDN configuration
      set_fact:
        cdn_config: "{{ tenant_data | from_yaml }}"

    - name: Debug cdn_config
      debug:
        var: cdn_config

    - name: Update apt package index
      apt:
        update_cache: yes
      become: true

    - name: Install BIND9 DNS server
      apt:
        name: bind9
        state: present
      become: true

    - name: Ensure BIND zones directory exists
      file:
        path: "{{ bind_zones_path }}"
        state: directory
        mode: '0755'

    - name: Assign subnets sequentially to each location
      set_fact:
        subnet_mapping: "{{ dict(cdn_config[tenant_name]['cdn']['location'] | zip(subnets)) }}"

    - name: Comment out named.conf.default-zones include in named.conf
      lineinfile:
        path: "{{ bind_conf_path }}/named.conf"
        regexp: '^include "/etc/bind/named.conf.default-zones";$'
        line: '#include "/etc/bind/named.conf.default-zones";'
        state: present

    - name: Setup BIND named.conf with dynamic ACLs for each location
      blockinfile:
        path: "{{ bind_conf_path }}/named.conf"
        block: |
          {% for location in cdn_config[tenant_name]['cdn']['location'] %}
          acl "{{ location.lower() }}-users" {
              {{ subnet_mapping[location] }};
          };
          view "{{ location }}" {
              match-clients { {{ location.lower() }}-users; };
              zone "{{ cdn_config[tenant_name]['cdn']['domainName'] }}" {
                  type master;
                  file "{{ bind_zones_path }}/db.{{ cdn_config[tenant_name]['cdn']['domainName'] }}.{{ location.lower() }}";
              };
          };
          {% endfor %}
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR CDN CONFIGURATION"
        insertafter: EOF

    - name: Fetch IP address for the interface based on location
      shell: >
        ip netns exec {{tenant_abbreviation[tenant_name]}}_{{location}} ip -o -4 addr show {{tenant_abbreviation[tenant_name]}}_{{location}}_veth1 | 
        awk '{print $4}' | cut -d/ -f1
      register: ns_domain_ip_raw
      loop: "{{ cdn_config[tenant_name]['cdn']['location'] }}"
      loop_control:
        loop_var: location
      changed_when: false
      delegate_to: localhost

    - name: Template DNS zone file for each location
      template:
        src: "db.domain.zone.j2"
        dest: "{{ bind_zones_path }}/db.{{ cdn_config[tenant_name]['cdn']['domainName'] }}.{{ item.location.lower() }}"
      loop: "{{ ns_domain_ip_raw.results }}"
      loop_control:
        loop_var: item
      vars:
        domain_name: "{{ cdn_config[tenant_name]['cdn']['domainName'] }}"
        origin_vpc_public_subnet_ip: "{{ cdn_config[tenant_name]['cdn']['cdn_vpcs']['origin_vpc'][0]['CIDR'] | ipaddr('network') | ipmath(2) }}"
        ns_domain_ip: "{{ item.stdout }}"

    - name: Restart BIND9 to apply changes
      service:
        name: bind9
        state: restarted




